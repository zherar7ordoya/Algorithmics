Tengo una aplicación en C# Winforms .NET 9.
Necesito armar la clase controladora de la vista.
¿Me ayudas?


ENUNCIADO

Nos solicitan crear un programa que maneje una lista de personas y los autos que estas poseen. Nos indican que una persona puede ser dueño de más de un auto. Pero que los autos poseen como máximo un titular.

Una persona posee: 

Características
* DNI (cadena lectura/escritura)
* Nombre (cadena lectura/escritura)
* Apellido (cadena lectura/escritura)

Métodos
* Lista de autos (Retorna la lista de autos que la persona es dueño)
* Cantidad de autos (Retorna la cantidad de autos que posee la persona)

Constructores
* Un constructor con todos los parámetros que permiten inicializar las propiedades.

Finalizador
* Que cuando el objeto queda liberado muestre una leyenda indicando el DNI de la Persona. 

Un auto posee:

Características 
* Patente (cadena lectura/escritura)
* Marca (cadena lectura/escritura)
* Modelo (cadena lectura/escritura)
* Año (cadena lectura/escritura)
* Precio (decimal lectura/escritura)

Métodos
* Dueño Persona (Retorna el dueño del auto)

Constructores
* Un constructor con todos los parámetros que permiten inicializar propiedades.

Finalizador
* Que cuando el objeto queda liberado muestre una leyenda indicando la Patente del Auto. 

GUI:

Nos solicitan que la GUI (interfaz gráfica del usuario) permita visualizar en grillas:
* La lista de las personas. (Grilla 1) 
* La lista de los autos. (Grilla 2) 
* Los autos de la persona seleccionado en la grilla 1. (Grilla 3) 
* Una grilla (Grilla 4) con los siguientes datos y en el siguiente orden de columnas, para cada auto de la grilla 2: Marca, Año, Modelo, Patente, DNI del dueño, “Apellido, Nombre” del dueño en una misma columna.  (Grilla 4) 

La GUI debe tener botones para: 
* Agregar personas y autos. 
* Borrar personas y autos. 
* Modificar personas y autos. 
* Asignarle a la persona seleccionada en la grilla 1 el auto seleccionado en la grilla 2 

Además:
* La GUI debe tener una etiqueta donde se observe el valor correspondiente a la suma de los precios de los autos de la persona seleccionada en la grilla 1.
* También nos solicitan que cada valor ingresado sea validado de manera que no se introduzcan datos inconsistentes. 

Recursos:

A considerar para la resolución:
* Listas de programación
* Clases
* Instancias
* Propiedades
* Métodos
* Constructores
* Finalizadores
* Programación Orientada a Objetos
* Try…Catch.


CÓDIGO REALIZADO HASTA EL MOMENTO

(Para Abstract)

public abstract class Entity : IEntity
{
    [XmlAttribute]
    public int Id { get; set; }
}

public interface ICRUD<T> where T : IEntity
{
    T Create(T entity);
    List<T> Read();
    bool Update(T entity);
    bool Delete(T entity);
}

public interface IEntity
{
    int Id { get; set; }
}

public interface IPersister<T> where T : IEntity
{
    List<T> Read();
    bool Write(List<T> datos);
}


(Para Entities)

public class Auto : Entity
{
    public Auto() { }

    public Auto(string patente, string marca, string modelo, int año, decimal precio)
    {
        Patente = patente;
        Marca = marca;
        Modelo = modelo;
        Año = año;
        Precio = precio;
    }

    //--------------------------------------------------------------------------

    public string? Patente { get; set; }
    public string? Marca { get; set; }
    public string? Modelo { get; set; }
    public int Año { get; set; }
    public decimal Precio { get; set; }

    public Persona? Dueño { get; internal set; }
    internal void EstablecerDueño(Persona? nuevoDueño) => Dueño = nuevoDueño;

    //--------------------------------------------------------------------------

    public static event Action<string>? AutoEliminado;
    ~Auto() => AutoEliminado?.Invoke($"El objeto Auto con Patente {Patente} ha sido eliminado.");
}

public static partial class AutoValidator
{
    [System.Text.RegularExpressions.GeneratedRegex(@"^[A-Z]{2}\d{3}[A-Z]{2}$|^[A-Z]{3}\d{3}$")]
    private static partial Regex PatenteRegex();

    public static void Validar(Auto auto)
    {
        if (string.IsNullOrEmpty(auto.Patente) || !PatenteRegex().IsMatch(auto.Patente))
        {
            throw new ArgumentException("Formato de patente inválido.");
        }

        if (string.IsNullOrEmpty(auto.Marca))
        {
            throw new ArgumentException("La marca no puede estar vacía.");
        }

        if (string.IsNullOrEmpty(auto.Modelo))
        {
            throw new ArgumentException("El modelo no puede estar vacío.");
        }

        if (auto.Año < 1900 || auto.Año > DateTime.Now.Year)
        {
            throw new ArgumentException("Año inválido.");
        }

        if (auto.Precio <= 0)
        {
            throw new ArgumentException("El precio debe ser mayor a 0.");
        }
    }
}

public class Persona : Entity
{
    public Persona() { }

    public Persona(string dni, string nombre, string apellido)
    {
        DNI = dni;
        Nombre = nombre;
        Apellido = apellido;
    }

    //--------------------------------------------------------------------------

    public string? DNI { get; set; }
    public string? Nombre { get; set; }
    public string? Apellido { get; set; }

    public List<Auto> Autos { get; } = [];

    //--------------------------------------------------------------------------

    public static event Action<string>? PersonaEliminada;
    ~Persona() => PersonaEliminada?.Invoke($"El objeto Persona con DNI {DNI} ha sido eliminado.");
}

public static partial class PersonaValidator
{
    [System.Text.RegularExpressions.GeneratedRegex(@"^\d{7,8}$")]
    private static partial Regex DniRegex();

    public static void Validar(Persona persona)
    {
        if (string.IsNullOrEmpty(persona.DNI) || !DniRegex().IsMatch(persona.DNI))
        {
            throw new ArgumentException("Formato de DNI inválido.");
        }

        if (string.IsNullOrEmpty(persona.Nombre))
        {
            throw new ArgumentException("El nombre no puede estar vacío.");
        }

        if (string.IsNullOrEmpty(persona.Apellido))
        {
            throw new ArgumentException("El apellido no puede estar vacío.");
        }
    }
}

(Para Logic)

public static class AsignacionesManager
{
    public static void AsignarAuto(Persona persona, Auto auto)
    {
        if (auto.Dueño is not null)
        {
            throw new InvalidOperationException("El auto ya tiene un dueño.");
        }

        persona.Autos.Add(auto);
        auto.EstablecerDueño(persona);
    }

    public static void DesasignarAuto(Persona persona, Auto auto)
    {
        if (persona.Autos.Remove(auto))
        {
            auto.EstablecerDueño(null);
        }
        else
        {
            throw new InvalidOperationException("El auto no pertenece a la persona.");
        }
    }
}

public class AutoManager : CRUD<Auto>
{
    public void CrearAuto(string patente, string marca, string modelo, int año, decimal precio)
    {
        var auto = new Auto(patente, marca, modelo, año, precio);
        ValidateAndCreate(auto, AutoValidator.Validar);
    }
}

public class PersonaManager : CRUD<Persona>
{
    public void CrearPersona(string dni, string nombre, string apellido)
    {
        var persona = new Persona(dni, nombre, apellido);
        ValidateAndCreate(persona, PersonaValidator.Validar);
    }

    public static List<Auto> GetListaAutos(Persona persona) => persona.Autos;

    public static int GetCantidadAutos(Persona persona) => persona.Autos.Count;

    public static decimal GetValorAutos(Persona persona) => persona.Autos.Sum(auto => auto.Precio);
}

(Para Persistence)

public class CRUD<T> : ICRUD<T> where T : IEntity
{
    private readonly XmlPersister<T> _persister = new();

    private static void LogError(string message)
    {
        string logFile = "error_log.txt";
        var logMessage = $"[{DateTime.Now}] {message}";
        File.AppendAllText(logFile, logMessage + Environment.NewLine);
    }

    protected bool ValidateAndCreate(T entity, Action<T> validator)
    {
        try
        {
            validator(entity);
            Create(entity);
            return true;
        }
        catch (ArgumentException ex)
        {
            LogError($"Error al validar y crear el objeto {typeof(T).Name}: {ex.Message}");
            return false;  // No se pudo crear debido a un error de validación
        }
    }

    //--------------------------------------------------------------------------

    public T Create(T entity)
    {
        var entities = _persister.Read();
        entity.Id = entities.Count > 0 ? entities.Max(x => x.Id) + 1 : 1;
        entities.Add(entity);
        _persister.Write(entities);
        return entity;
    }

    public bool Delete(T entity)
    {
        var entities = _persister.Read();
        int removedCount = entities.RemoveAll(x => x.Id == entity.Id);
        return removedCount > 0 && _persister.Write(entities);
    }

    public List<T> Read()
    {
        var entities = _persister.Read();
        return entities;
    }

    public bool Update(T entity)
    {
        var entities = _persister.Read();
        var entityToUpdate = entities.FirstOrDefault(x => x.Id == entity.Id);
        if (entityToUpdate == null) return false;

        var index = entities.IndexOf(entityToUpdate);
        if (index >= 0)
        {
            entities[index] = entity;
        }

        return _persister.Write(entities);
    }
}

public class PersisterException(string message,
                                Exception innerException) : Exception(message, innerException)
{
}

public class XmlPersister<T> : IPersister<T> where T : IEntity
{
    private static void LogError(string message, Exception ex)
    {
        var logMessage = $"[{DateTime.Now}] {message} - Excepción: {ex.GetType().Name}, Mensaje: {ex.Message}";
        File.AppendAllText("Log.txt", logMessage + Environment.NewLine);
    }

    //--------------------------------------------------------------------------

    public List<T> Read()
    {
        string file = $"{typeof(T).Name}.xml";

        if (!File.Exists(file))
        {
            XmlPersister<T>.CreateEmptyFile(file);
            return [];
        }

        StreamReader? reader = null;

        try
        {
            XmlSerializer serializer = new(typeof(List<T>));
            reader = new StreamReader(file, Encoding.Unicode);
            var result = serializer.Deserialize(reader) as List<T>;
            return result ?? [];
        }
        catch (FileNotFoundException ex)
        {
            LogError($"Archivo no encontrado: {file}", ex);
            throw new PersisterException($"El archivo {file} no fue encontrado.", ex);
        }
        catch (UnauthorizedAccessException ex)
        {
            LogError($"Acceso no autorizado al archivo: {file}", ex);
            throw new PersisterException($"No tiene permisos para acceder al archivo {file}.", ex);
        }
        catch (Exception ex)
        {
            LogError($"Error desconocido al leer {file}", ex);
            throw new PersisterException($"Error al leer {file}.", ex);
        }
        finally
        {
            if (reader != null)
            {
                reader.Close();
                reader.Dispose();
            }
        }
    }

    public bool Write(List<T> datos)
    {
        string file = $"{typeof(T).Name}.xml";

        try
        {
            XmlSerializer serializer = new(typeof(List<T>));
            using StreamWriter writer = new(file, false, Encoding.Unicode);
            serializer.Serialize(writer, datos);
            return true;
        }
        catch (FileNotFoundException ex)
        {
            LogError($"Archivo no encontrado: {file}", ex);
            throw new PersisterException($"El archivo {file} no fue encontrado.", ex);
        }
        catch (UnauthorizedAccessException ex)
        {
            LogError($"Acceso no autorizado al archivo: {file}", ex);
            throw new PersisterException($"No tiene permisos para acceder al archivo {file}.", ex);
        }
        catch (Exception ex)
        {
            LogError($"Error desconocido al leer {file}", ex);
            throw new PersisterException($"Error al leer {file}.", ex);
        }
    }

    private static void CreateEmptyFile(string file)
    {
        try
        {
            XmlSerializer serializer = new(typeof(List<T>));
            using StreamWriter writer = new(file, false, Encoding.Unicode);
            serializer.Serialize(writer, new List<T>());
        }
        catch (FileNotFoundException ex)
        {
            LogError($"Archivo no encontrado: {file}", ex);
            throw new PersisterException($"El archivo {file} no fue encontrado.", ex);
        }
        catch (UnauthorizedAccessException ex)
        {
            LogError($"Acceso no autorizado al archivo: {file}", ex);
            throw new PersisterException($"No tiene permisos para acceder al archivo {file}.", ex);
        }
        catch (Exception ex)
        {
            LogError($"Error desconocido al leer {file}", ex);
            throw new PersisterException($"Error al leer {file}.", ex);
        }
    }
}

(El Form según Designer)

        internal Panel panel1;
        internal Label label1;
        internal DataGridView PersonasDataGridView;
        internal Button EliminarPersonaButton;
        internal Button GuardarPersonaButton;
        internal Button NuevoPersonaButton;
        internal DataGridView AutosDePersonaDataGridView;
        internal Label label2;
        internal Label label6;
        internal Label label5;
        internal Label label4;
        internal Label label3;
        internal TextBox ApellidoTextBox;
        internal TextBox NombreTextBox;
        internal TextBox DniTextBox;
        internal TextBox IdPersonaTextBox;
        internal Panel panel2;
        internal TextBox ModeloTextBox;
        internal TextBox MarcaTextBox;
        internal TextBox PatenteTextBox;
        internal TextBox IdAutoTextBox;
        internal Label label7;
        internal Label label8;
        internal Label label9;
        internal Label label10;
        internal Button EliminarAutoButton;
        internal Button GuardarAutoButton;
        internal Button NuevoAutoButton;
        internal DataGridView AutosDisponiblesDataGridView;
        internal Label label12;
        internal Label label11;
        internal NumericUpDown PrecioNumericUpDown;
        internal Button AsignarAutoButton;
        internal Button QuitarAutoButton;
        internal DataGridView AutosAsignadosDataGridView;
        internal Label label13;
        internal ErrorProvider ErrorProvider;

(El código en el Form)

public partial class ViewForm : Form
{
    public ViewForm()
    {
        InitializeComponent();

        Auto.AutoEliminado += mensaje => MessageBox.Show(mensaje, "Objeto Eliminado", MessageBoxButtons.OK, MessageBoxIcon.Information);
        Persona.PersonaEliminada += mensaje => MessageBox.Show(mensaje, "Objeto Eliminado", MessageBoxButtons.OK, MessageBoxIcon.Information);
    }
}

(La clase controladora... aquí me encuentro en este momento...)

public class ViewController
{
}

